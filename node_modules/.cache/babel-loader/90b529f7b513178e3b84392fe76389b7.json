{"ast":null,"code":"import { call, all, takeLatest, put, select } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { getTodosSuccess, removeTodoSuccess } from './actions';\nimport { TodoTypes } from './types';\n\nfunction* getTodos() {\n  //const todosData = localStorage.getItem(\"todoList\")\n\n  /*const mock = [\n    {\n        id: uuid(),\n        message: \"Teste 1\",\n        done: false\n    },\n    {\n        id: uuid(),\n        message: \"Teste 2\",\n        done: false\n    }\n    ]\n    */\n  const todoData = yield call(api.get, '');\n  console.log(todoData);\n  yield put(getTodosSuccess(todoData));\n}\n\nfunction* addTodo({\n  payload\n}) {\n  const todos = yield select(state => state.todo.todos);\n  const newTodo = {\n    message: payload.message,\n    done: false\n  };\n  const updatedTodos = [newTodo, ...todos];\n  yield put(getTodosSuccess(updatedTodos));\n}\n\nfunction* removeTodo({\n  payload\n}) {\n  const todos = yield select(state => state.todo.todos);\n  const updatedTodos = todos.filter(todo => todo._id !== payload.id);\n  console.log(payload);\n  yield put(removeTodoSuccess(updatedTodos));\n}\n\nfunction* changeTodo({\n  payload\n}) {\n  const todos = yield select(state => state.todo.todos);\n  const updatedTodos = todos.map(todo => ({ ...todo,\n    done: todo._id == payload.id ? !todo.done : todo.done\n  }));\n  yield put(getTodosSuccess(updatedTodos));\n}\n\nexport default all([takeLatest(TodoTypes.GET_TODOS_REQUEST, getTodos), takeLatest(TodoTypes.REMOVE_TODO_REQUEST, removeTodo), takeLatest(TodoTypes.CHANGE_TODO_REQUEST, changeTodo), takeLatest(TodoTypes.ADD_TODO_REQUEST, addTodo)]);","map":{"version":3,"sources":["/home/beatriz/Documents/bootcamp/real2u_sagasredux/src/store/modules/todo/sagas.tsx"],"names":["call","all","takeLatest","put","select","api","getTodosSuccess","removeTodoSuccess","TodoTypes","getTodos","todoData","get","console","log","addTodo","payload","todos","state","todo","newTodo","message","done","updatedTodos","removeTodo","filter","_id","id","changeTodo","map","GET_TODOS_REQUEST","REMOVE_TODO_REQUEST","CHANGE_TODO_REQUEST","ADD_TODO_REQUEST"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAASC,eAAT,EAA0BC,iBAA1B,QAAkD,WAAlD;AAKA,SAASC,SAAT,QAAoC,SAApC;;AAGA,UAAUC,QAAV,GAAqB;AACnB;;AACA;;;;;;;;;;;;;AAaE,QAAMC,QAAQ,GAAG,MAAMV,IAAI,CAACK,GAAG,CAACM,GAAL,EAAU,EAAV,CAA3B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,QAAMP,GAAG,CAACG,eAAe,CAACI,QAAD,CAAhB,CAAT;AACH;;AAED,UAAUI,OAAV,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EAAuC;AACnC,QAAMC,KAAK,GAAG,MAAMZ,MAAM,CAAEa,KAAD,IAA6BA,KAAK,CAACC,IAAN,CAAWF,KAAzC,CAA1B;AACA,QAAMG,OAAO,GAAG;AACZC,IAAAA,OAAO,EAAEL,OAAO,CAACK,OADL;AAEZC,IAAAA,IAAI,EAAE;AAFM,GAAhB;AAKA,QAAMC,YAAY,GAAG,CAACH,OAAD,EAAU,GAAGH,KAAb,CAArB;AACA,QAAMb,GAAG,CAACG,eAAe,CAACgB,YAAD,CAAhB,CAAT;AACH;;AAED,UAAUC,UAAV,CAAqB;AAAER,EAAAA;AAAF,CAArB,EAA6C;AAC3C,QAAMC,KAAK,GAAG,MAAMZ,MAAM,CAAEa,KAAD,IAA6BA,KAAK,CAACC,IAAN,CAAWF,KAAzC,CAA1B;AAEA,QAAMM,YAAY,GAAGN,KAAK,CAACQ,MAAN,CAAcN,IAAD,IAAoBA,IAAI,CAACO,GAAL,KAAaV,OAAO,CAACW,EAAtD,CAArB;AAEAd,EAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ;AAEA,QAAMZ,GAAG,CAACI,iBAAiB,CAACe,YAAD,CAAlB,CAAT;AACD;;AAED,UAAUK,UAAV,CAAqB;AAAEZ,EAAAA;AAAF,CAArB,EAA6C;AACzC,QAAMC,KAAK,GAAG,MAAMZ,MAAM,CAAEa,KAAD,IAA6BA,KAAK,CAACC,IAAN,CAAWF,KAAzC,CAA1B;AACA,QAAMM,YAAY,GAAGN,KAAK,CAACY,GAAN,CAAWV,IAAD,KAC1B,EAAC,GAAGA,IAAJ;AAAUG,IAAAA,IAAI,EAAEH,IAAI,CAACO,GAAL,IAAUV,OAAO,CAACW,EAAlB,GAAsB,CAACR,IAAI,CAACG,IAA5B,GAAmCH,IAAI,CAACG;AAAxD,GAD0B,CAAV,CAArB;AAMA,QAAMlB,GAAG,CAACG,eAAe,CAACgB,YAAD,CAAhB,CAAT;AACD;;AAEH,eAAerB,GAAG,CAAC,CACjBC,UAAU,CAACM,SAAS,CAACqB,iBAAX,EAA8BpB,QAA9B,CADO,EAEjBP,UAAU,CAACM,SAAS,CAACsB,mBAAX,EAAgCP,UAAhC,CAFO,EAGjBrB,UAAU,CAACM,SAAS,CAACuB,mBAAX,EAAgCJ,UAAhC,CAHO,EAIjBzB,UAAU,CAACM,SAAS,CAACwB,gBAAX,EAA6BlB,OAA7B,CAJO,CAAD,CAAlB","sourcesContent":["import { call, all, takeLatest, put, select } from 'redux-saga/effects'\nimport api from '../../../services/api'\n\nimport { getTodosSuccess, removeTodoSuccess} from './actions'\nimport { AnyAction } from 'redux'\n\nimport { ApplicationState } from '../../index'\n\nimport { TodoTypes, TodoData } from './types'\nimport { uuid } from 'uuidv4'\n\nfunction* getTodos() {\n  //const todosData = localStorage.getItem(\"todoList\")\n  /*const mock = [\n    {\n        id: uuid(),\n        message: \"Teste 1\",\n        done: false\n    },\n    {\n        id: uuid(),\n        message: \"Teste 2\",\n        done: false\n    }\n    ]\n    */\n    const todoData = yield call(api.get, '')\n    console.log(todoData)\n    yield put(getTodosSuccess(todoData))\n}\n\nfunction* addTodo({payload}: AnyAction){\n    const todos = yield select((state: ApplicationState) => state.todo.todos)\n    const newTodo = {\n        message: payload.message,\n        done: false\n    }\n\n    const updatedTodos = [newTodo, ...todos]\n    yield put(getTodosSuccess(updatedTodos))\n}\n\nfunction* removeTodo({ payload }: AnyAction) {\n  const todos = yield select((state: ApplicationState) => state.todo.todos)\n\n  const updatedTodos = todos.filter((todo: TodoData) => todo._id !== payload.id)\n\n  console.log(payload)\n\n  yield put(removeTodoSuccess(updatedTodos))\n}\n\nfunction* changeTodo({ payload }: AnyAction) {\n    const todos = yield select((state: ApplicationState) => state.todo.todos)\n    const updatedTodos = todos.map((todo: TodoData) =>\n        ({...todo, done: todo._id==payload.id?(!todo.done):(todo.done)})\n\n    )\n\n  \n    yield put(getTodosSuccess(updatedTodos))\n  }\n\nexport default all([\n  takeLatest(TodoTypes.GET_TODOS_REQUEST, getTodos),\n  takeLatest(TodoTypes.REMOVE_TODO_REQUEST, removeTodo),\n  takeLatest(TodoTypes.CHANGE_TODO_REQUEST, changeTodo),\n  takeLatest(TodoTypes.ADD_TODO_REQUEST, addTodo),\n])"]},"metadata":{},"sourceType":"module"}