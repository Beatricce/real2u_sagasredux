{"ast":null,"code":"import { all, takeLatest, put, select } from 'redux-saga/effects';\nimport { getTodosSuccess, removeTodoSuccess } from './actions';\nimport { TodoTypes } from './types';\nimport { uuid } from 'uuidv4';\n\nfunction* getTodos() {\n  //const todosData = localStorage.getItem(\"todoList\")\n  console.log(\"from sagas\");\n  const mock = [{\n    id: uuid(),\n    message: \"Teste 1\",\n    done: false\n  }, {\n    id: uuid(),\n    message: \"Teste 2\",\n    done: false\n  }];\n  yield put(getTodosSuccess(mock));\n}\n\nfunction* addTodo({\n  payload\n}) {\n  const todos = yield select(state => state.todo.todos);\n  const newTodo = {\n    id: uuid(),\n    message: payload.message,\n    done: false\n  };\n  const updatedTodos = [newTodo, ...todos];\n  yield put(getTodosSuccess(updatedTodos));\n}\n\nfunction* removeTodo({\n  payload\n}) {\n  const todos = yield select(state => state.todo.todos);\n  const updatedTodos = todos.filter(todo => todo.id !== payload.id);\n  console.log(payload);\n  yield put(removeTodoSuccess(updatedTodos));\n}\n\nfunction* changeTodo({\n  payload\n}) {\n  const todos = yield select(state => state.todo.todos);\n  console.log(todos);\n  const updatedTodos = todos.map(todo => ({ ...todo,\n    done: todo.id == payload.id ? !todo.done : todo.done\n  }));\n  yield put(getTodosSuccess(updatedTodos));\n}\n\nexport default all([takeLatest(TodoTypes.GET_TODOS_REQUEST, getTodos), takeLatest(TodoTypes.REMOVE_TODO_REQUEST, removeTodo), takeLatest(TodoTypes.CHANGE_TODO_REQUEST, changeTodo), takeLatest(TodoTypes.ADD_TODO_REQUEST, addTodo)]);","map":{"version":3,"sources":["/home/beatriz/Documents/bootcamp/aula14/src/store/modules/todo/sagas.tsx"],"names":["all","takeLatest","put","select","getTodosSuccess","removeTodoSuccess","TodoTypes","uuid","getTodos","console","log","mock","id","message","done","addTodo","payload","todos","state","todo","newTodo","updatedTodos","removeTodo","filter","changeTodo","map","GET_TODOS_REQUEST","REMOVE_TODO_REQUEST","CHANGE_TODO_REQUEST","ADD_TODO_REQUEST"],"mappings":"AAAA,SAAeA,GAAf,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AAEA,SAASC,eAAT,EAA0BC,iBAA1B,QAAkD,WAAlD;AAKA,SAASC,SAAT,QAAoC,SAApC;AACA,SAASC,IAAT,QAAqB,QAArB;;AAEA,UAAUC,QAAV,GAAqB;AACnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAMC,IAAI,GAAG,CACX;AACIC,IAAAA,EAAE,EAAEL,IAAI,EADZ;AAEIM,IAAAA,OAAO,EAAE,SAFb;AAGIC,IAAAA,IAAI,EAAE;AAHV,GADW,EAMX;AACIF,IAAAA,EAAE,EAAEL,IAAI,EADZ;AAEIM,IAAAA,OAAO,EAAE,SAFb;AAGIC,IAAAA,IAAI,EAAE;AAHV,GANW,CAAb;AAaA,QAAMZ,GAAG,CAACE,eAAe,CAACO,IAAD,CAAhB,CAAT;AACD;;AAED,UAAUI,OAAV,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EAAuC;AACnC,QAAMC,KAAK,GAAG,MAAMd,MAAM,CAAEe,KAAD,IAA6BA,KAAK,CAACC,IAAN,CAAWF,KAAzC,CAA1B;AACA,QAAMG,OAAO,GAAG;AACZR,IAAAA,EAAE,EAAEL,IAAI,EADI;AAEZM,IAAAA,OAAO,EAAEG,OAAO,CAACH,OAFL;AAGZC,IAAAA,IAAI,EAAE;AAHM,GAAhB;AAMA,QAAMO,YAAY,GAAG,CAACD,OAAD,EAAU,GAAGH,KAAb,CAArB;AACA,QAAMf,GAAG,CAACE,eAAe,CAACiB,YAAD,CAAhB,CAAT;AACH;;AAED,UAAUC,UAAV,CAAqB;AAAEN,EAAAA;AAAF,CAArB,EAA6C;AAC3C,QAAMC,KAAK,GAAG,MAAMd,MAAM,CAAEe,KAAD,IAA6BA,KAAK,CAACC,IAAN,CAAWF,KAAzC,CAA1B;AAEA,QAAMI,YAAY,GAAGJ,KAAK,CAACM,MAAN,CAAcJ,IAAD,IAAoBA,IAAI,CAACP,EAAL,KAAYI,OAAO,CAACJ,EAArD,CAArB;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAYM,OAAZ;AAEA,QAAMd,GAAG,CAACG,iBAAiB,CAACgB,YAAD,CAAlB,CAAT;AACD;;AAED,UAAUG,UAAV,CAAqB;AAAER,EAAAA;AAAF,CAArB,EAA6C;AACzC,QAAMC,KAAK,GAAG,MAAMd,MAAM,CAAEe,KAAD,IAA6BA,KAAK,CAACC,IAAN,CAAWF,KAAzC,CAA1B;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,QAAMI,YAAY,GAAGJ,KAAK,CAACQ,GAAN,CAAWN,IAAD,KAC1B,EAAC,GAAGA,IAAJ;AAAUL,IAAAA,IAAI,EAAEK,IAAI,CAACP,EAAL,IAASI,OAAO,CAACJ,EAAjB,GAAqB,CAACO,IAAI,CAACL,IAA3B,GAAkCK,IAAI,CAACL;AAAvD,GAD0B,CAAV,CAArB;AAMA,QAAMZ,GAAG,CAACE,eAAe,CAACiB,YAAD,CAAhB,CAAT;AACD;;AAEH,eAAerB,GAAG,CAAC,CACjBC,UAAU,CAACK,SAAS,CAACoB,iBAAX,EAA8BlB,QAA9B,CADO,EAEjBP,UAAU,CAACK,SAAS,CAACqB,mBAAX,EAAgCL,UAAhC,CAFO,EAGjBrB,UAAU,CAACK,SAAS,CAACsB,mBAAX,EAAgCJ,UAAhC,CAHO,EAIjBvB,UAAU,CAACK,SAAS,CAACuB,gBAAX,EAA6Bd,OAA7B,CAJO,CAAD,CAAlB","sourcesContent":["import { call, all, takeLatest, put, select } from 'redux-saga/effects'\n\nimport { getTodosSuccess, removeTodoSuccess} from './actions'\nimport { AnyAction } from 'redux'\n\nimport { ApplicationState } from '../../index'\n\nimport { TodoTypes, TodoData } from './types'\nimport { uuid } from 'uuidv4'\n\nfunction* getTodos() {\n  //const todosData = localStorage.getItem(\"todoList\")\n  console.log(\"from sagas\")\n  const mock = [\n    {\n        id: uuid(),\n        message: \"Teste 1\",\n        done: false\n    },\n    {\n        id: uuid(),\n        message: \"Teste 2\",\n        done: false\n    }\n    ]\n\n  yield put(getTodosSuccess(mock))\n}\n\nfunction* addTodo({payload}: AnyAction){\n    const todos = yield select((state: ApplicationState) => state.todo.todos)\n    const newTodo = {\n        id: uuid(),\n        message: payload.message,\n        done: false\n    }\n\n    const updatedTodos = [newTodo, ...todos]\n    yield put(getTodosSuccess(updatedTodos))\n}\n\nfunction* removeTodo({ payload }: AnyAction) {\n  const todos = yield select((state: ApplicationState) => state.todo.todos)\n\n  const updatedTodos = todos.filter((todo: TodoData) => todo.id !== payload.id)\n\n  console.log(payload)\n\n  yield put(removeTodoSuccess(updatedTodos))\n}\n\nfunction* changeTodo({ payload }: AnyAction) {\n    const todos = yield select((state: ApplicationState) => state.todo.todos)\n    console.log(todos)\n    const updatedTodos = todos.map((todo: TodoData) =>\n        ({...todo, done: todo.id==payload.id?(!todo.done):(todo.done)})\n\n    )\n\n  \n    yield put(getTodosSuccess(updatedTodos))\n  }\n\nexport default all([\n  takeLatest(TodoTypes.GET_TODOS_REQUEST, getTodos),\n  takeLatest(TodoTypes.REMOVE_TODO_REQUEST, removeTodo),\n  takeLatest(TodoTypes.CHANGE_TODO_REQUEST, changeTodo),\n  takeLatest(TodoTypes.ADD_TODO_REQUEST, addTodo),\n])"]},"metadata":{},"sourceType":"module"}